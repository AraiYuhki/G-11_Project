//================================================================================
//	アイテムクラス
//	Author:Tsukagoshi Toshiyuki
//================================================================================

//================================================================================
//	include
//================================================================================
#include "Item.h"
#include "Texture.h"

//================================================================================
//	静的メンバ
//================================================================================
std::list<Item*> Item::ItemList;

//================================================================================
//	アイテムテーブル
//================================================================================
const float Item::ItemScore[ITEM_ID_MAX] = {
	10.0f,			//うさぎ
	10.0f,			//ねこ
	10.0f,			//くま
};

//================================================================================
//	生成
//================================================================================
Item* Item::Create(const D3DXVECTOR3 &pos, const D3DXVECTOR2 &size, const D3DXCOLOR &color, const int &id, int priority)
{
	Item* item = new Item(priority);
	item->SetPos(pos);
	item->SetSize(D3DXVECTOR3(size.x, size.y, 0));
	item->SetColor(color);

	item->SetID(id);
	item->SetTexture(GetTexture(TEX((int)TEX_ITEM_OFFSET + id)));
	item->SetScore(ItemScore[id]);

	return item;
}

//================================================================================
//	コンストラクタ
//================================================================================
Item::Item(int priority)
{
	if (!ItemList.empty())
	{
		ItemList.clear();
	}
	ItemList.push_back(this);
}

//================================================================================
//	デストラクタ
//================================================================================
Item::~Item()
{
	for (auto itr = ItemList.begin(); itr != ItemList.end();)
	{
		if (*itr == this)
		{
			itr = ItemList.erase(itr);
		}
		else
		{
			++itr;
		}
	}
}

//================================================================================
//	更新処理
//================================================================================
void Item::Update()
{

}

//================================================================================
//	描画処理
//================================================================================
void Item::Draw()
{

}
